// src/main.pb.ts
routerAdd("GET", "/hello/{name}", (e) => {
  let name = e.request?.pathValue("name");
  return e.json(200, { message: "Hello " + name });
});
routerAdd("GET", "/api/full-ip-info/{ip}", (e) => {
  const apiKey = $os.getenv("IP_GEOLOCATION_API_KEY");
  $app.logger().debug(`apiKey: ${apiKey}`);
  const ip = e.request?.pathValue("ip");
  if (!ip) {
    return e.json(400, { error: "IP address is required" });
  }
  let record;
  try {
    record = $app.findFirstRecordByData("ips", "ip", ip);
    const updated = new Date(record.get("updated"));
    if (updated > new Date(Date.now() - 7 * 24 * 60 * 60 * 1000)) {
      $app.logger().info("Cache hit for ip: ", { ip });
      console.log(`Cache hit for ip: ${ip}`);
      return e.json(200, record.get("info"));
    } else {
      console.log(`Cache miss for ip: ${ip}`);
    }
  } catch (error) {
  }
  const url = `https://api.ipgeolocation.io/ipgeo?apiKey=${apiKey}&ip=${ip}`;
  $app.logger().info("Sending request to ipgeolocation: ", { url });
  const response = $http.send({
    url,
    method: "GET"
  });
  if (response.statusCode !== 200) {
    $app.logger().error("Failed to fetch IP geolocation data: ", {
      statusCode: response.statusCode,
      body: response.raw
    });
    return e.json(500, { error: "Failed to fetch IP geolocation data" });
  }
  const ipInfo = response.json;
  $app.logger().debug("IP geolocation data: ", { ipInfo });
  if (!record) {
    let collection = $app.findCollectionByNameOrId("ips");
    record = new Record(collection);
  }
  record.set("ip", ip);
  record.set("info", ipInfo);
  record.set("country", ipInfo.country_name);
  record.set("latitude", ipInfo.latitude);
  record.set("longitude", ipInfo.longitude);
  $app.save(record);
  return e.json(200, response.json);
});
onRecordAfterUpdateSuccess((e) => {
  console.log("user updated...", e.record?.get("email"));
  e.next();
}, "users");

//# debugId=0BF6B32C588819C964756E2164756E21
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vc3JjL21haW4ucGIudHMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbCiAgICAiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uL3BiX2RhdGEvdHlwZXMuZC50c1wiIC8+XG5cbi8vIG9uQm9vdHN0cmFwKChlKSA9PiB7XG4vLyAgIGNvbnN0IGFwaUtleSA9ICRvcy5nZXRlbnYoXCJJUF9HRU9MT0NBVElPTl9BUElfS0VZXCIpO1xuLy8gICBjb25zb2xlLmxvZyhcIm9uQm9vdHN0cmFwXCIsIGUpO1xuLy8gICBjb25zb2xlLmxvZyhcImFwaUtleVwiLCBhcGlLZXkpO1xuLy8gfSk7XG5cbnJvdXRlckFkZChcIkdFVFwiLCBcIi9oZWxsby97bmFtZX1cIiwgKGUpID0+IHtcbiAgbGV0IG5hbWUgPSBlLnJlcXVlc3Q/LnBhdGhWYWx1ZShcIm5hbWVcIik7XG5cbiAgcmV0dXJuIGUuanNvbigyMDAsIHsgbWVzc2FnZTogXCJIZWxsbyBcIiArIG5hbWUgfSk7XG59KTtcblxucm91dGVyQWRkKFwiR0VUXCIsIFwiL2FwaS9mdWxsLWlwLWluZm8ve2lwfVwiLCAoZSkgPT4ge1xuICBjb25zdCBhcGlLZXkgPSAkb3MuZ2V0ZW52KFwiSVBfR0VPTE9DQVRJT05fQVBJX0tFWVwiKTtcbiAgJGFwcC5sb2dnZXIoKS5kZWJ1ZyhgYXBpS2V5OiAke2FwaUtleX1gKTtcbiAgY29uc3QgaXAgPSBlLnJlcXVlc3Q/LnBhdGhWYWx1ZShcImlwXCIpO1xuICBpZiAoIWlwKSB7XG4gICAgcmV0dXJuIGUuanNvbig0MDAsIHsgZXJyb3I6IFwiSVAgYWRkcmVzcyBpcyByZXF1aXJlZFwiIH0pO1xuICB9XG4gIC8vIGZldGNoIGZyb20gREJcbiAgbGV0IHJlY29yZDtcbiAgdHJ5IHtcbiAgICByZWNvcmQgPSAkYXBwLmZpbmRGaXJzdFJlY29yZEJ5RGF0YShcImlwc1wiLCBcImlwXCIsIGlwKTtcbiAgICBjb25zdCB1cGRhdGVkID0gbmV3IERhdGUocmVjb3JkLmdldChcInVwZGF0ZWRcIikpO1xuICAgIGlmICh1cGRhdGVkID4gbmV3IERhdGUoRGF0ZS5ub3coKSAtIDcgKiAyNCAqIDYwICogNjAgKiAxMDAwKSkge1xuICAgICAgLy8gaWYgdXBkYXRlZCB3aXRoaW4gYSB3ZWVrXG4gICAgICAkYXBwLmxvZ2dlcigpLmluZm8oXCJDYWNoZSBoaXQgZm9yIGlwOiBcIiwgeyBpcCB9KTtcbiAgICAgIGNvbnNvbGUubG9nKGBDYWNoZSBoaXQgZm9yIGlwOiAke2lwfWApO1xuICAgICAgcmV0dXJuIGUuanNvbigyMDAsIHJlY29yZC5nZXQoXCJpbmZvXCIpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc29sZS5sb2coYENhY2hlIG1pc3MgZm9yIGlwOiAke2lwfWApO1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyb3IpIHt9XG4gIGNvbnN0IHVybCA9IGBodHRwczovL2FwaS5pcGdlb2xvY2F0aW9uLmlvL2lwZ2VvP2FwaUtleT0ke2FwaUtleX0maXA9JHtpcH1gO1xuICAkYXBwLmxvZ2dlcigpLmluZm8oXCJTZW5kaW5nIHJlcXVlc3QgdG8gaXBnZW9sb2NhdGlvbjogXCIsIHsgdXJsIH0pO1xuICBjb25zdCByZXNwb25zZSA9ICRodHRwLnNlbmQoe1xuICAgIHVybCxcbiAgICBtZXRob2Q6IFwiR0VUXCIsXG4gIH0pO1xuICBpZiAocmVzcG9uc2Uuc3RhdHVzQ29kZSAhPT0gMjAwKSB7XG4gICAgJGFwcC5sb2dnZXIoKS5lcnJvcihcIkZhaWxlZCB0byBmZXRjaCBJUCBnZW9sb2NhdGlvbiBkYXRhOiBcIiwge1xuICAgICAgc3RhdHVzQ29kZTogcmVzcG9uc2Uuc3RhdHVzQ29kZSxcbiAgICAgIGJvZHk6IHJlc3BvbnNlLnJhdyxcbiAgICB9KTtcbiAgICByZXR1cm4gZS5qc29uKDUwMCwgeyBlcnJvcjogXCJGYWlsZWQgdG8gZmV0Y2ggSVAgZ2VvbG9jYXRpb24gZGF0YVwiIH0pO1xuICB9XG4gIGNvbnN0IGlwSW5mbyA9IHJlc3BvbnNlLmpzb247XG4gICRhcHAubG9nZ2VyKCkuZGVidWcoXCJJUCBnZW9sb2NhdGlvbiBkYXRhOiBcIiwgeyBpcEluZm8gfSk7XG4gIGlmICghcmVjb3JkKSB7XG4gICAgbGV0IGNvbGxlY3Rpb24gPSAkYXBwLmZpbmRDb2xsZWN0aW9uQnlOYW1lT3JJZChcImlwc1wiKTtcbiAgICByZWNvcmQgPSBuZXcgUmVjb3JkKGNvbGxlY3Rpb24pO1xuICB9XG4gIHJlY29yZC5zZXQoXCJpcFwiLCBpcCk7XG4gIHJlY29yZC5zZXQoXCJpbmZvXCIsIGlwSW5mbyk7XG4gIHJlY29yZC5zZXQoXCJjb3VudHJ5XCIsIGlwSW5mby5jb3VudHJ5X25hbWUpO1xuICByZWNvcmQuc2V0KFwibGF0aXR1ZGVcIiwgaXBJbmZvLmxhdGl0dWRlKTtcbiAgcmVjb3JkLnNldChcImxvbmdpdHVkZVwiLCBpcEluZm8ubG9uZ2l0dWRlKTtcbiAgJGFwcC5zYXZlKHJlY29yZCk7XG5cbiAgcmV0dXJuIGUuanNvbigyMDAsIHJlc3BvbnNlLmpzb24pO1xufSk7XG5cbm9uUmVjb3JkQWZ0ZXJVcGRhdGVTdWNjZXNzKChlKSA9PiB7XG4gIGNvbnNvbGUubG9nKFwidXNlciB1cGRhdGVkLi4uXCIsIGUucmVjb3JkPy5nZXQoXCJlbWFpbFwiKSk7XG4gIGUubmV4dCgpO1xufSwgXCJ1c2Vyc1wiKTtcbiIKICBdLAogICJtYXBwaW5ncyI6ICI7QUFRQSxVQUFVLE9BQU8saUJBQWlCLENBQUMsTUFBTTtBQUN2QyxNQUFJLE9BQU8sRUFBRSxTQUFTLFVBQVUsTUFBTTtBQUV0QyxTQUFPLEVBQUUsS0FBSyxLQUFLLEVBQUUsU0FBUyxXQUFXLEtBQUssQ0FBQztBQUFBLENBQ2hEO0FBRUQsVUFBVSxPQUFPLDBCQUEwQixDQUFDLE1BQU07QUFDaEQsUUFBTSxTQUFTLElBQUksT0FBTyx3QkFBd0I7QUFDbEQsT0FBSyxPQUFPLEVBQUUsTUFBTSxXQUFXLFFBQVE7QUFDdkMsUUFBTSxLQUFLLEVBQUUsU0FBUyxVQUFVLElBQUk7QUFDcEMsT0FBSyxJQUFJO0FBQ1AsV0FBTyxFQUFFLEtBQUssS0FBSyxFQUFFLE9BQU8seUJBQXlCLENBQUM7QUFBQSxFQUN4RDtBQUVBLE1BQUk7QUFDSixNQUFJO0FBQ0YsYUFBUyxLQUFLLHNCQUFzQixPQUFPLE1BQU0sRUFBRTtBQUNuRCxVQUFNLFVBQVUsSUFBSSxLQUFLLE9BQU8sSUFBSSxTQUFTLENBQUM7QUFDOUMsUUFBSSxVQUFVLElBQUksS0FBSyxLQUFLLElBQUksSUFBSSxJQUFJLEtBQUssS0FBSyxLQUFLLElBQUksR0FBRztBQUU1RCxXQUFLLE9BQU8sRUFBRSxLQUFLLHNCQUFzQixFQUFFLEdBQUcsQ0FBQztBQUMvQyxjQUFRLElBQUkscUJBQXFCLElBQUk7QUFDckMsYUFBTyxFQUFFLEtBQUssS0FBSyxPQUFPLElBQUksTUFBTSxDQUFDO0FBQUEsSUFDdkMsT0FBTztBQUNMLGNBQVEsSUFBSSxzQkFBc0IsSUFBSTtBQUFBO0FBQUEsV0FFakMsT0FBUDtBQUFBO0FBQ0YsUUFBTSxNQUFNLDZDQUE2QyxhQUFhO0FBQ3RFLE9BQUssT0FBTyxFQUFFLEtBQUssc0NBQXNDLEVBQUUsSUFBSSxDQUFDO0FBQ2hFLFFBQU0sV0FBVyxNQUFNLEtBQUs7QUFBQSxJQUMxQjtBQUFBLElBQ0EsUUFBUTtBQUFBLEVBQ1YsQ0FBQztBQUNELE1BQUksU0FBUyxlQUFlLEtBQUs7QUFDL0IsU0FBSyxPQUFPLEVBQUUsTUFBTSx5Q0FBeUM7QUFBQSxNQUMzRCxZQUFZLFNBQVM7QUFBQSxNQUNyQixNQUFNLFNBQVM7QUFBQSxJQUNqQixDQUFDO0FBQ0QsV0FBTyxFQUFFLEtBQUssS0FBSyxFQUFFLE9BQU8sc0NBQXNDLENBQUM7QUFBQSxFQUNyRTtBQUNBLFFBQU0sU0FBUyxTQUFTO0FBQ3hCLE9BQUssT0FBTyxFQUFFLE1BQU0seUJBQXlCLEVBQUUsT0FBTyxDQUFDO0FBQ3ZELE9BQUssUUFBUTtBQUNYLFFBQUksYUFBYSxLQUFLLHlCQUF5QixLQUFLO0FBQ3BELGFBQVMsSUFBSSxPQUFPLFVBQVU7QUFBQSxFQUNoQztBQUNBLFNBQU8sSUFBSSxNQUFNLEVBQUU7QUFDbkIsU0FBTyxJQUFJLFFBQVEsTUFBTTtBQUN6QixTQUFPLElBQUksV0FBVyxPQUFPLFlBQVk7QUFDekMsU0FBTyxJQUFJLFlBQVksT0FBTyxRQUFRO0FBQ3RDLFNBQU8sSUFBSSxhQUFhLE9BQU8sU0FBUztBQUN4QyxPQUFLLEtBQUssTUFBTTtBQUVoQixTQUFPLEVBQUUsS0FBSyxLQUFLLFNBQVMsSUFBSTtBQUFBLENBQ2pDO0FBRUQsMkJBQTJCLENBQUMsTUFBTTtBQUNoQyxVQUFRLElBQUksbUJBQW1CLEVBQUUsUUFBUSxJQUFJLE9BQU8sQ0FBQztBQUNyRCxJQUFFLEtBQUs7QUFBQSxHQUNOLE9BQU87IiwKICAiZGVidWdJZCI6ICIwQkY2QjMyQzU4ODgxOUM5NjQ3NTZFMjE2NDc1NkUyMSIsCiAgIm5hbWVzIjogW10KfQ==
