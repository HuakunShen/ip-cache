// src/main.pb.ts
routerAdd("GET", "/hello/{name}", (e) => {
  let name = e.request?.pathValue("name");
  return e.json(200, { message: "Hello " + name });
});
routerAdd("GET", "/api/basic-ip-info/{ip}", async (e) => {
  const apiKey = $os.getenv("IP_GEOLOCATION_API_KEY");
  const ip = e.request?.pathValue("ip");
  if (!ip) {
    return e.json(400, { error: "IP address is required" });
  }
  const lib = require(`${__hooks}/lib.js`);
  try {
    const record = lib.getCachedRecord(ip);
    if (record && lib.isCacheValid(record)) {
      $app.logger().info("Cache hit for ip: ", { ip });
      return e.json(200, {
        country: record.get("country"),
        latitude: record.get("latitude"),
        longitude: record.get("longitude")
      });
    }
    const ipInfo = lib.fetchIpInfo(ip, apiKey);
    lib.saveIpRecord(ip, ipInfo);
    return e.json(200, {
      country: ipInfo.country_name,
      latitude: ipInfo.latitude,
      longitude: ipInfo.longitude
    });
  } catch (error) {
    return e.json(500, { error: error.message || "An unknown error occurred" });
  }
});
routerAdd("GET", "/api/full-ip-info/{ip}", async (e) => {
  const apiKey = $os.getenv("IP_GEOLOCATION_API_KEY");
  const ip = e.request?.pathValue("ip");
  if (!ip) {
    return e.json(400, { error: "IP address is required" });
  }
  const lib = require(`${__hooks}/lib.js`);
  try {
    const record = lib.getCachedRecord(ip);
    if (record && lib.isCacheValid(record)) {
      $app.logger().info("Cache hit for ip: ", { ip });
      return e.json(200, record.get("info"));
    }
    const ipInfo = lib.fetchIpInfo(ip, apiKey);
    lib.saveIpRecord(ip, ipInfo);
    return e.json(200, ipInfo);
  } catch (error) {
    return e.json(500, { error: error.message || "An unknown error occurred" });
  }
});
onRecordAfterUpdateSuccess((e) => {
  console.log("user updated...", e.record?.get("email"));
  e.next();
}, "users");

//# debugId=403655FB416A5CF464756E2164756E21
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vc3JjL21haW4ucGIudHMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbCiAgICAiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uL3BiX2RhdGEvdHlwZXMuZC50c1wiIC8+XG5cbi8vIG9uQm9vdHN0cmFwKChlKSA9PiB7XG4vLyAgIGNvbnN0IGFwaUtleSA9ICRvcy5nZXRlbnYoXCJJUF9HRU9MT0NBVElPTl9BUElfS0VZXCIpO1xuLy8gICBjb25zb2xlLmxvZyhcIm9uQm9vdHN0cmFwXCIsIGUpO1xuLy8gICBjb25zb2xlLmxvZyhcImFwaUtleVwiLCBhcGlLZXkpO1xuLy8gfSk7XG5cbnJvdXRlckFkZChcIkdFVFwiLCBcIi9oZWxsby97bmFtZX1cIiwgKGUpID0+IHtcbiAgbGV0IG5hbWUgPSBlLnJlcXVlc3Q/LnBhdGhWYWx1ZShcIm5hbWVcIik7XG4gIHJldHVybiBlLmpzb24oMjAwLCB7IG1lc3NhZ2U6IFwiSGVsbG8gXCIgKyBuYW1lIH0pO1xufSk7XG5cbnJvdXRlckFkZChcIkdFVFwiLCBcIi9hcGkvYmFzaWMtaXAtaW5mby97aXB9XCIsIGFzeW5jIChlKSA9PiB7XG4gIGNvbnN0IGFwaUtleSA9ICRvcy5nZXRlbnYoXCJJUF9HRU9MT0NBVElPTl9BUElfS0VZXCIpO1xuICBjb25zdCBpcCA9IGUucmVxdWVzdD8ucGF0aFZhbHVlKFwiaXBcIik7XG4gIGlmICghaXApIHtcbiAgICByZXR1cm4gZS5qc29uKDQwMCwgeyBlcnJvcjogXCJJUCBhZGRyZXNzIGlzIHJlcXVpcmVkXCIgfSk7XG4gIH1cbiAgY29uc3QgbGliID0gcmVxdWlyZShgJHtfX2hvb2tzfS9saWIuanNgKTtcbiAgdHJ5IHtcbiAgICBjb25zdCByZWNvcmQgPSBsaWIuZ2V0Q2FjaGVkUmVjb3JkKGlwKTtcbiAgICBpZiAocmVjb3JkICYmIGxpYi5pc0NhY2hlVmFsaWQocmVjb3JkKSkge1xuICAgICAgJGFwcC5sb2dnZXIoKS5pbmZvKFwiQ2FjaGUgaGl0IGZvciBpcDogXCIsIHsgaXAgfSk7XG4gICAgICByZXR1cm4gZS5qc29uKDIwMCwge1xuICAgICAgICBjb3VudHJ5OiByZWNvcmQuZ2V0KFwiY291bnRyeVwiKSxcbiAgICAgICAgbGF0aXR1ZGU6IHJlY29yZC5nZXQoXCJsYXRpdHVkZVwiKSxcbiAgICAgICAgbG9uZ2l0dWRlOiByZWNvcmQuZ2V0KFwibG9uZ2l0dWRlXCIpLFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgY29uc3QgaXBJbmZvID0gbGliLmZldGNoSXBJbmZvKGlwLCBhcGlLZXkpO1xuICAgIGxpYi5zYXZlSXBSZWNvcmQoaXAsIGlwSW5mbyk7XG5cbiAgICByZXR1cm4gZS5qc29uKDIwMCwge1xuICAgICAgY291bnRyeTogaXBJbmZvLmNvdW50cnlfbmFtZSxcbiAgICAgIGxhdGl0dWRlOiBpcEluZm8ubGF0aXR1ZGUsXG4gICAgICBsb25naXR1ZGU6IGlwSW5mby5sb25naXR1ZGUsXG4gICAgfSk7XG4gIH0gY2F0Y2ggKGVycm9yOiBhbnkpIHtcbiAgICByZXR1cm4gZS5qc29uKDUwMCwgeyBlcnJvcjogZXJyb3IubWVzc2FnZSB8fCBcIkFuIHVua25vd24gZXJyb3Igb2NjdXJyZWRcIiB9KTtcbiAgfVxufSk7XG5cbnJvdXRlckFkZChcIkdFVFwiLCBcIi9hcGkvZnVsbC1pcC1pbmZvL3tpcH1cIiwgYXN5bmMgKGUpID0+IHtcbiAgY29uc3QgYXBpS2V5ID0gJG9zLmdldGVudihcIklQX0dFT0xPQ0FUSU9OX0FQSV9LRVlcIik7XG4gIGNvbnN0IGlwID0gZS5yZXF1ZXN0Py5wYXRoVmFsdWUoXCJpcFwiKTtcbiAgaWYgKCFpcCkge1xuICAgIHJldHVybiBlLmpzb24oNDAwLCB7IGVycm9yOiBcIklQIGFkZHJlc3MgaXMgcmVxdWlyZWRcIiB9KTtcbiAgfVxuICBjb25zdCBsaWIgPSByZXF1aXJlKGAke19faG9va3N9L2xpYi5qc2ApO1xuXG4gIHRyeSB7XG4gICAgY29uc3QgcmVjb3JkID0gbGliLmdldENhY2hlZFJlY29yZChpcCk7XG4gICAgaWYgKHJlY29yZCAmJiBsaWIuaXNDYWNoZVZhbGlkKHJlY29yZCkpIHtcbiAgICAgICRhcHAubG9nZ2VyKCkuaW5mbyhcIkNhY2hlIGhpdCBmb3IgaXA6IFwiLCB7IGlwIH0pO1xuICAgICAgcmV0dXJuIGUuanNvbigyMDAsIHJlY29yZC5nZXQoXCJpbmZvXCIpKTtcbiAgICB9XG5cbiAgICBjb25zdCBpcEluZm8gPSBsaWIuZmV0Y2hJcEluZm8oaXAsIGFwaUtleSk7XG4gICAgbGliLnNhdmVJcFJlY29yZChpcCwgaXBJbmZvKTtcblxuICAgIHJldHVybiBlLmpzb24oMjAwLCBpcEluZm8pO1xuICB9IGNhdGNoIChlcnJvcjogYW55KSB7XG4gICAgcmV0dXJuIGUuanNvbig1MDAsIHsgZXJyb3I6IGVycm9yLm1lc3NhZ2UgfHwgXCJBbiB1bmtub3duIGVycm9yIG9jY3VycmVkXCIgfSk7XG4gIH1cbn0pO1xuXG5vblJlY29yZEFmdGVyVXBkYXRlU3VjY2VzcygoZSkgPT4ge1xuICBjb25zb2xlLmxvZyhcInVzZXIgdXBkYXRlZC4uLlwiLCBlLnJlY29yZD8uZ2V0KFwiZW1haWxcIikpO1xuICBlLm5leHQoKTtcbn0sIFwidXNlcnNcIik7XG4iCiAgXSwKICAibWFwcGluZ3MiOiAiO0FBUUEsVUFBVSxPQUFPLGlCQUFpQixDQUFDLE1BQU07QUFDdkMsTUFBSSxPQUFPLEVBQUUsU0FBUyxVQUFVLE1BQU07QUFDdEMsU0FBTyxFQUFFLEtBQUssS0FBSyxFQUFFLFNBQVMsV0FBVyxLQUFLLENBQUM7QUFBQSxDQUNoRDtBQUVELFVBQVUsT0FBTywyQkFBMkIsT0FBTyxNQUFNO0FBQ3ZELFFBQU0sU0FBUyxJQUFJLE9BQU8sd0JBQXdCO0FBQ2xELFFBQU0sS0FBSyxFQUFFLFNBQVMsVUFBVSxJQUFJO0FBQ3BDLE9BQUssSUFBSTtBQUNQLFdBQU8sRUFBRSxLQUFLLEtBQUssRUFBRSxPQUFPLHlCQUF5QixDQUFDO0FBQUEsRUFDeEQ7QUFDQSxRQUFNLE1BQU0sUUFBUSxHQUFHLGdCQUFnQjtBQUN2QyxNQUFJO0FBQ0YsVUFBTSxTQUFTLElBQUksZ0JBQWdCLEVBQUU7QUFDckMsUUFBSSxVQUFVLElBQUksYUFBYSxNQUFNLEdBQUc7QUFDdEMsV0FBSyxPQUFPLEVBQUUsS0FBSyxzQkFBc0IsRUFBRSxHQUFHLENBQUM7QUFDL0MsYUFBTyxFQUFFLEtBQUssS0FBSztBQUFBLFFBQ2pCLFNBQVMsT0FBTyxJQUFJLFNBQVM7QUFBQSxRQUM3QixVQUFVLE9BQU8sSUFBSSxVQUFVO0FBQUEsUUFDL0IsV0FBVyxPQUFPLElBQUksV0FBVztBQUFBLE1BQ25DLENBQUM7QUFBQSxJQUNIO0FBRUEsVUFBTSxTQUFTLElBQUksWUFBWSxJQUFJLE1BQU07QUFDekMsUUFBSSxhQUFhLElBQUksTUFBTTtBQUUzQixXQUFPLEVBQUUsS0FBSyxLQUFLO0FBQUEsTUFDakIsU0FBUyxPQUFPO0FBQUEsTUFDaEIsVUFBVSxPQUFPO0FBQUEsTUFDakIsV0FBVyxPQUFPO0FBQUEsSUFDcEIsQ0FBQztBQUFBLFdBQ00sT0FBUDtBQUNBLFdBQU8sRUFBRSxLQUFLLEtBQUssRUFBRSxPQUFPLE1BQU0sV0FBVyw0QkFBNEIsQ0FBQztBQUFBO0FBQUEsQ0FFN0U7QUFFRCxVQUFVLE9BQU8sMEJBQTBCLE9BQU8sTUFBTTtBQUN0RCxRQUFNLFNBQVMsSUFBSSxPQUFPLHdCQUF3QjtBQUNsRCxRQUFNLEtBQUssRUFBRSxTQUFTLFVBQVUsSUFBSTtBQUNwQyxPQUFLLElBQUk7QUFDUCxXQUFPLEVBQUUsS0FBSyxLQUFLLEVBQUUsT0FBTyx5QkFBeUIsQ0FBQztBQUFBLEVBQ3hEO0FBQ0EsUUFBTSxNQUFNLFFBQVEsR0FBRyxnQkFBZ0I7QUFFdkMsTUFBSTtBQUNGLFVBQU0sU0FBUyxJQUFJLGdCQUFnQixFQUFFO0FBQ3JDLFFBQUksVUFBVSxJQUFJLGFBQWEsTUFBTSxHQUFHO0FBQ3RDLFdBQUssT0FBTyxFQUFFLEtBQUssc0JBQXNCLEVBQUUsR0FBRyxDQUFDO0FBQy9DLGFBQU8sRUFBRSxLQUFLLEtBQUssT0FBTyxJQUFJLE1BQU0sQ0FBQztBQUFBLElBQ3ZDO0FBRUEsVUFBTSxTQUFTLElBQUksWUFBWSxJQUFJLE1BQU07QUFDekMsUUFBSSxhQUFhLElBQUksTUFBTTtBQUUzQixXQUFPLEVBQUUsS0FBSyxLQUFLLE1BQU07QUFBQSxXQUNsQixPQUFQO0FBQ0EsV0FBTyxFQUFFLEtBQUssS0FBSyxFQUFFLE9BQU8sTUFBTSxXQUFXLDRCQUE0QixDQUFDO0FBQUE7QUFBQSxDQUU3RTtBQUVELDJCQUEyQixDQUFDLE1BQU07QUFDaEMsVUFBUSxJQUFJLG1CQUFtQixFQUFFLFFBQVEsSUFBSSxPQUFPLENBQUM7QUFDckQsSUFBRSxLQUFLO0FBQUEsR0FDTixPQUFPOyIsCiAgImRlYnVnSWQiOiAiNDAzNjU1RkI0MTZBNUNGNDY0NzU2RTIxNjQ3NTZFMjEiLAogICJuYW1lcyI6IFtdCn0=
